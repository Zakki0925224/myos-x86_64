# https://taskfile.dev

version: '3'

vars:
    OUTPUT_DIR: build
    BOOTLOADER_DIR: bootloader
    KERNEL_DIR: kernel
    DUMP_DIR: dump

    BOOTLOADER_FILE: bootx64.efi
    KERNEL_FILE: kernel.elf
    IMG_FILE: myos.img
    ISO_FILE: myos.iso

    QEMU_DEVICES: |
        ahci,id=ahci
        ide-cd,drive=disk,bus=ahci.0
    QEMU_DRIVES: |
        id=disk,if=none,format=raw,file={{$.OUTPUT_DIR}}/{{$.IMG_FILE}}
    QEMU_ARGS: |
        -bios /usr/share/edk2-ovmf/x64/OVMF.fd
        -no-reboot
        -no-shutdown
        -m 4G
        -serial mon:stdio
        -monitor telnet::1234,server,nowait
    QEMU: qemu-system-x86_64 {{range .QEMU_ARGS | splitLines -}}{{if .}}{{.}} {{end}}{{end -}} {{range .QEMU_DRIVES | splitLines -}}{{if .}}-drive {{.}} {{end}}{{end -}} {{range .QEMU_DEVICES | splitLines -}}{{if .}}-device {{.}} {{end}}{{end -}}
tasks:
    init:
        cmds:
            - mkdir -p {{$.OUTPUT_DIR}}

    build:
        deps: [build-kernel, build-bootloader]

    build-bootloader:
        deps: [init]
        dir: ./{{$.BOOTLOADER_DIR}}
        cmds:
            - cargo build --release
            - cp ./target/x86_64-unknown-uefi/release/bootloader.efi ../{{$.OUTPUT_DIR}}/{{$.BOOTLOADER_FILE}}

    build-kernel:
        deps: [init]
        dir: ./{{$.KERNEL_DIR}}
        cmds:
            - cargo build --release
            - cp ./target/x86_64-unknown-none/release/kernel ../{{$.OUTPUT_DIR}}/{{$.KERNEL_FILE}}

    makeimg:
        deps: [build]
        cmds:
            - qemu-img create -f raw ./{{$.OUTPUT_DIR}}/{{$.IMG_FILE}} 200M
            - mkfs.fat -n "MYOS" -F 32 -s 2 ./{{$.OUTPUT_DIR}}/{{$.IMG_FILE}} # format for FAT32
            - sudo mount -o loop ./{{$.OUTPUT_DIR}}/{{$.IMG_FILE}} /mnt
            - sudo mkdir -p /mnt/EFI/BOOT
            - sudo mkdir -p /mnt/EFI/myos
            - sudo cp {{$.OUTPUT_DIR}}/{{$.BOOTLOADER_FILE}} /mnt/EFI/BOOT/BOOTX64.EFI
            - sudo cp {{$.OUTPUT_DIR}}/{{$.KERNEL_FILE}} /mnt/EFI/myos/kernel.elf
            - sleep 0.5
            - sudo umount /mnt

    run:
        deps: [makeimg]
        cmds:
            - "{{$.QEMU}}"

    qemu-monitor:
        cmds:
            - telnet localhost 1234

    dump:
        deps: [build]
        cmds:
            - mkdir -p {{$.DUMP_DIR}}
            - objdump -d {{$.OUTPUT_DIR}}/{{$.KERNEL_FILE}} > {{$.DUMP_DIR}}/dump_kernel.txt
            - objdump -d {{$.OUTPUT_DIR}}/{{$.BOOTLOADER_FILE}} > {{$.DUMP_DIR}}/dump_bootloader.txt

